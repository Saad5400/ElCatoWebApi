@model HomeVM
@{
    ViewData["Title"] = "Home";
}

<link rel="stylesheet" href="~/css/cardW.css"/>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


@if(Model.Alert != null){
    <div class="alert alert-dismissible @Model.Alert.AlertType sticky-top arabicFont">
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        @Html.Raw(Model.Alert.Content)
    </div>
}

<div class="container">

    @* Cat Header *@
    <div class="row pt-lg-5 pt-0" id="catHeaderDiv">
        <div class="col-lg-6 text-lg-start text-center glitch">
            @for(int i = 0; i < 9; i++) {
                <div class="line">
                    <img class="w-100" src="~/images/glitchedCat.webp"/>
                </div>
            }
        </div>
        <div class="col-lg-6">
            <div class="row h-100 align-items-center">
                <div id="dimElCatoHeader" class="glitch-container">
                    <h1 id="ElCatoHeader" class="display-1 text-center glitched-font py-2 py-lg-0 wgg-glitch" data-text="El Cato">
                        @* a600a6, 0F056E, D10DED, 060328, 380BEA, 74BE22, 377FF6 *@
                        El Cato
                    </h1>
                </div>

            </div>
        </div>

    </div>

    @* Simple Nav *@
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            @* <a class="navbar-brand" href="#">Navbar</a> *@
            <button class="navbar-toggler" type="button" id="hiddenNavBtn" data-bs-toggle="collapse"
                    data-bs-target="#navbarColor01" aria-controls="navbarColor01"
                    aria-expanded="false" aria-label="Toggle navigation" hidden>
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="collapse navbar-collapse" id="navbarColor01">
                <ul class="navbar-nav me-auto">
                    @* <li class="nav-item"> *@
                    @*     <a class="nav-link active" href="#">Home *@
                    @*     </a> *@
                    @* </li> *@
                    <li class="nav-item">
                        <a class="nav-link" href="#programming">Programming</a>
                    </li>
                    @* <li class="nav-item"> *@
                    @*     <a class="nav-link" href="#null" onclick="customizeClicked()">Customize</a> *@
                    @* </li> *@
                </ul>
            </div>
        </div>
    </nav>
    @* Line *@
    <div class="card" id="programming">

    </div>
    
    @* Programming Cards *@
    <div class="row pt-5">
        @foreach (var card in Model.Cards)
        {
            <div class="col-lg-4 col-md-6">
                <div class="cardW text-start" id="java1Card"
                     style="height: 80px;" data-longHeight="alculateHeight">

                    <div class="content">
                        <h2>
                            @card.DisplayName
                        </h2>
                    </div>
                    <ul class="navigationW p-0 mb-0">
                        @foreach (var item in card.Items)
                        {
                            <li>
                                @{
                                    string href = "";
                                    try
                                    {
                                        href = string.IsNullOrEmpty(item.Href) ?
                                            $"Programming/{item.Page.Folder.Replace(' ', '_')}/{item.Page.Name.Replace(' ', '_')}" :
                                            $"{item.Href}";
                                    }
                                    catch (Exception e)
                                    {
                                        href = "#";
                                    }
                                }
                                <a
                                    href="@href">

                                    <i class="@item.CssClasses"></i>
                                    @item.DisplayName
                                    @if (item.Icon != null)
                                    {
                                        <div class="swordsDiv">
                                            <img class="iconSword" src="~/images/@item.Icon">
                                        </div>
                                    }
                                </a>
                            </li>
                        }
                    </ul>
                    <div class="toggleW">
                        <i class="bi bi-caret-down"></i>
                    </div>
                </div>
            </div>

        }
    </div>
    
    @* Empty Space *@
    <div style="position: static; height: 500px;">

    </div>
</div>

@section Scripts
{ 
    <script>


        // reveal navbar if hidden
        document.getElementById("hiddenNavBtn").click();
        // bind cards and their toggles
        let cards = document.getElementsByClassName("cardW");

        let toggles = document.getElementsByClassName("toggleW");
        
        for (let i = 0; i < cards.length; i++) {
            let card = cards[i];
            let toggle = toggles[i];

            card.setAttribute("data-longHeight", card.getBoundingClientRect().height * 2 + card.childNodes[3].getBoundingClientRect().height + 'px');

            let smallHeight = card.style.height;
            let longHeight = card.getAttribute("data-longHeight");

            toggle.onclick = function () {
                card.classList.toggle("active");
                card.style.height = card.style.height == smallHeight ? longHeight : smallHeight;
            }
        }

        function customizeClicked() {
            Swal.fire({
                title: '',
                icon: 'question',
                html:
                    `
                    <div class="form-group">
                        <input type="text" class="form-control" placeholder="Background text">
                        <small class="form-text text-muted">Current: 01</small>

                        <input type="text" class="form-control" placeholder="Split text at">
                        <small class="form-text text-muted">Current: (empty string)</small>

                        <input type="number" class="form-control" placeholder="Size scaler">
                        <small class="form-text text-muted">Current: 2</small>
                    </div>
                    `,
                showCloseButton: true,
                showCancelButton: true,
                showDenyButton: true,
                focusConfirm: false,
                confirmButtonText:
                    'Save!',
                cancelButtonText:
                    'Cancel',
                denyButtonText:
                    `Reset`,
            }).then((result) => {
                /* Read more about isConfirmed, isDenied below */
                if (result.isConfirmed) {
                    Swal.fire('Saved!', '', 'success');
                } else if (result.isDenied) {
                    Swal.fire('Everything is back to default', '', 'success');
                }
            });
        }

        // remove later
        // customizeClicked();
    </script>

}
