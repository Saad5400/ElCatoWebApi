{"version":3,"file":"static/js/193.09321eb9.chunk.js","mappings":"6KAEe,SAASA,EAAiBC,GAErC,IAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAaD,EAAAA,EAAAA,QAAO,MACpBE,GAAaF,EAAAA,EAAAA,QAAO,MAC1BG,GAAsCC,EAAAA,EAAAA,UAASC,OAAOC,aAAYC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAA3DM,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GA6DlC,OA3DAI,EAAAA,EAAAA,YAAU,WACN,SAASC,IACLF,EAAeL,OAAOQ,WAC1B,CAGA,OADAR,OAAOS,iBAAiB,SAAUF,GAC3B,kBAAMP,OAAOU,oBAAoB,SAAUH,EAAc,CACpE,GAAG,KAEHI,EAAAA,EAAAA,kBAAgB,WACZ,GAAIjB,EAAUkB,QAAS,CAAC,IAADC,EAAAC,EACbC,EAASrB,EAAUkB,QACnBI,EAAMD,EAAOE,WAAW,MAC9BF,EAAOG,MAAQlB,OAAOQ,WACtBO,EAAOI,OAASnB,OAAOoB,YAOvB,IALA,IAAMC,EAAS5B,EAAM6B,KACfC,EAAW9B,EAAM+B,KACjBC,EAAUV,EAAOG,MAAQK,EAEzBG,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAASE,IACzBD,EAAMC,GAAK,EAEf,IAAIC,EAAgB,QAATf,EAAGb,cAAM,IAAAa,GAAsC,QAAtCC,EAAND,EAAQgB,iBAAiBhC,EAAWe,gBAAQ,IAAAE,OAAtC,EAANA,EAA8CgB,MAAMC,WAClEf,EAAIgB,UAAYJ,EAChBZ,EAAIiB,SAAS,EAAG,EAAGlB,EAAOG,MAAOH,EAAOI,QA2BxC,IAAMe,EAAQC,aA1Bd,WAAiB,IAADC,EAAAC,EACRT,EACJ,IAAK,IAADU,EAAAC,EACAX,EAAgB,QAATU,EAAGtC,cAAM,IAAAsC,GAAsC,QAAtCC,EAAND,EAAQT,iBAAiBhC,EAAWe,gBAAQ,IAAA2B,OAAtC,EAANA,EAA8CT,MAAMC,UAClE,CACA,MAAOS,GACHZ,EAAU,SACd,CACAA,EAAUA,EAAQa,UAAUb,EAAQc,QAAQ,KAAO,EAAGd,EAAQe,YAAY,MAAMC,MAAM,QACtF5B,EAAIgB,UAAY,QAAUJ,EAAQ,GAAK,KAAOA,EAAQ,GAAK,KAAOA,EAAQ,GAAK,UAC/EZ,EAAIiB,SAAS,EAAG,EAAGlB,EAAOG,MAAOH,EAAOI,QAExCH,EAAIgB,UAAmB,QAAVI,EAAIpC,cAAM,IAAAoC,GAAsC,QAAtCC,EAAND,EAAQP,iBAAiBjC,EAAWgB,gBAAQ,IAAAyB,OAAtC,EAANA,EAA8CP,MAC/Dd,EAAI6B,KAAOtB,EAAW,mBAEtB,IAAK,IAAIuB,EAAI,EAAGA,EAAIpB,EAAMqB,OAAQD,IAAK,CACnC,IAAMxB,EAAOD,EAAO2B,KAAKC,MAAMD,KAAKE,SAAW7B,EAAO0B,SACtD/B,EAAImC,SAAS7B,EAAMwB,EAAIvB,EAAUG,EAAMoB,GAAKvB,GAExCG,EAAMoB,GAAKvB,EAAWR,EAAOI,QAAU6B,KAAKE,SAAW,OACvDxB,EAAMoB,GAAK,GAGfpB,EAAMoB,IACV,CACJ,GACgCrD,EAAM2D,OAEtC,OAAO,kBAAMC,cAAcnB,EAAO,CACtC,CACJ,GAAG,CAAC9B,EAAaX,EAAM+B,KAAM/B,EAAM2D,MAAO3D,EAAM6B,QAG5CgC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UAAQC,IAAKhE,EAAWiE,GAAG,SAASC,UAAU,iDAC9CH,EAAAA,EAAAA,KAAA,OAAKC,IAAK9D,EAAYgE,UAAU,uBAChCH,EAAAA,EAAAA,KAAA,OAAKC,IAAK7D,EAAY+D,UAAU,oBAG5C,C","sources":["components/BinaryBackground.js"],"sourcesContent":["import { useEffect, useLayoutEffect, useRef, useState } from \"react\"\r\n\r\nexport default function BinaryBackground(props) {\r\n\r\n    const canvasRef = useRef(null);\r\n    const frColorRef = useRef(null);\r\n    const bgColorRef = useRef(null);\r\n    const [windowWidth, setWindowWidth] = useState(window.outerHeight);\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowWidth(window.innerWidth);\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useLayoutEffect(() => {\r\n        if (canvasRef.current) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n\r\n            const binary = props.text;\r\n            const fontSize = props.size;\r\n            const columns = canvas.width / fontSize;\r\n\r\n            const drops = [];\r\n            for (let x = 0; x < columns; x++) {\r\n                drops[x] = 1;\r\n            }\r\n            let bgColor = window?.getComputedStyle(bgColorRef.current)?.color.toString();\r\n            ctx.fillStyle = bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            function draw() {\r\n                let bgColor;\r\n                try {\r\n                    bgColor = window?.getComputedStyle(bgColorRef.current)?.color.toString();\r\n                }\r\n                catch (err) {\r\n                    bgColor = \"#000000\";\r\n                }\r\n                bgColor = bgColor.substring(bgColor.indexOf('(') + 1, bgColor.lastIndexOf(')')).split(/,\\s*/);\r\n                ctx.fillStyle = 'rgba(' + bgColor[0] + ', ' + bgColor[1] + ', ' + bgColor[2] + ', 0.05)';\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                // ctx.fillStyle =  \"#d4163c\"\r\n                ctx.fillStyle =  window?.getComputedStyle(frColorRef.current)?.color;\r\n                ctx.font = fontSize + 'px Glitch Goblin';\r\n\r\n                for (let i = 0; i < drops.length; i++) {\r\n                    const text = binary[Math.floor(Math.random() * binary.length)];\r\n                    ctx.fillText(text, i * fontSize, drops[i] * fontSize);\r\n\r\n                    if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\r\n                        drops[i] = 0;\r\n                    }\r\n\r\n                    drops[i]++;\r\n                }\r\n            }\r\n            const inter = setInterval(draw, props.speed);\r\n\r\n            return () => clearInterval(inter);\r\n        }\r\n    }, [windowWidth, props.size, props.speed, props.text]);\r\n\r\n    return (\r\n        <>\r\n            <canvas ref={canvasRef} id=\"canvas\" className=\"fixed top-0 left-0 w-screen h-screen z-[-1]\"></canvas>\r\n            <div ref={frColorRef} className=\"text-base-content\"></div>\r\n            <div ref={bgColorRef} className=\"text-base-200\"></div>\r\n        </>\r\n    )\r\n}"],"names":["BinaryBackground","props","canvasRef","useRef","frColorRef","bgColorRef","_useState","useState","window","outerHeight","_useState2","_slicedToArray","windowWidth","setWindowWidth","useEffect","handleResize","innerWidth","addEventListener","removeEventListener","useLayoutEffect","current","_window","_window$getComputedSt","canvas","ctx","getContext","width","height","innerHeight","binary","text","fontSize","size","columns","drops","x","bgColor","getComputedStyle","color","toString","fillStyle","fillRect","inter","setInterval","_window3","_window3$getComputedS","_window2","_window2$getComputedS","err","substring","indexOf","lastIndexOf","split","font","i","length","Math","floor","random","fillText","speed","clearInterval","_jsxs","_Fragment","children","_jsx","ref","id","className"],"sourceRoot":""}