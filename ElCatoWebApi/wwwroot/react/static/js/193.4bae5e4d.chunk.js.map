{"version":3,"file":"static/js/193.4bae5e4d.chunk.js","mappings":"6KAEe,SAASA,EAAiBC,GAErC,IAAMC,GAAYC,EAAAA,EAAAA,QAAO,MACnBC,GAAaD,EAAAA,EAAAA,QAAO,MACpBE,GAAaF,EAAAA,EAAAA,QAAO,MAC1BG,GAAgDC,EAAAA,EAAAA,UAASC,OAAOC,YAAWC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAApEM,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAC5CI,GAAkDP,EAAAA,EAAAA,UAASC,OAAOO,aAAYC,GAAAL,EAAAA,EAAAA,GAAAG,EAAA,GAAvEG,EAAiBD,EAAA,GAAEE,EAAoBF,EAAA,GAwD9C,OAtDAG,EAAAA,EAAAA,YAAU,WACN,SAASC,IACLP,EAAoBL,OAAOC,YAC3BS,EAAqBV,OAAOO,YAChC,CAGA,OADAP,OAAOa,iBAAiB,SAAUD,GAC3B,kBAAMZ,OAAOc,oBAAoB,SAAUF,EAAc,CACpE,GAAG,KAEHD,EAAAA,EAAAA,YAAU,WACN,GAAIjB,EAAUqB,QAAS,CAAC,IACdC,EAAStB,EAAUqB,QACnBE,EAAMD,EAAOE,WAAW,MAC9BF,EAAOG,MAAQnB,OAAOC,WACtBe,EAAOI,OAASpB,OAAOO,YAOvB,IALA,IAAMc,EAAS5B,EAAM6B,KACfC,EAAW9B,EAAM+B,KACjBC,EAAUT,EAAOG,MAAQI,EAEzBG,EAAQ,GACLC,EAAI,EAAGA,EAAIF,EAASE,IACzBD,EAAMC,GAAK,EAEf,IAAIC,EAAU5B,OAAO6B,iBAAiBhC,EAAWkB,SAASe,MAAMC,WAChEd,EAAIe,UAAYJ,EAChBX,EAAIgB,SAAS,EAAG,EAAGjB,EAAOG,MAAOH,EAAOI,QAqBxC,IAAMc,EAAQC,aApBd,WACI,IAAIP,EAAU5B,OAAO6B,iBAAiBhC,EAAWkB,SAASe,MAAMC,WAChEH,EAAUA,EAAQQ,UAAUR,EAAQS,QAAQ,KAAO,EAAGT,EAAQU,YAAY,MAAMC,MAAM,QACtFtB,EAAIe,UAAY,QAAUJ,EAAQ,GAAK,KAAOA,EAAQ,GAAK,KAAOA,EAAQ,GAAK,UAC/EX,EAAIgB,SAAS,EAAG,EAAGjB,EAAOG,MAAOH,EAAOI,QAExCH,EAAIe,UAAahC,OAAO6B,iBAAiBjC,EAAWmB,SAASe,MAC7Db,EAAIuB,KAAOjB,EAAW,mBAEtB,IAAK,IAAIkB,EAAI,EAAGA,EAAIf,EAAMgB,OAAQD,IAAK,CACnC,IAAMnB,EAAOD,EAAOsB,KAAKC,MAAMD,KAAKE,SAAWxB,EAAOqB,SACtDzB,EAAI6B,SAASxB,EAAMmB,EAAIlB,EAAUG,EAAMe,GAAKlB,GAExCG,EAAMe,GAAKlB,EAAWP,EAAOI,QAAUuB,KAAKE,SAAW,OACvDnB,EAAMe,GAAK,GAGff,EAAMe,IACV,CACJ,GACgChD,EAAMsD,OAEtC,OAAO,kBAAMC,cAAcd,EAAO,CACtC,CACJ,GAAG,CAAC9B,EAAkBK,EAAmBhB,EAAM+B,KAAM/B,EAAMsD,MAAOtD,EAAM6B,QAGpE2B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,UAAQC,IAAK3D,EAAW4D,GAAG,SAASC,UAAU,iDAC9CH,EAAAA,EAAAA,KAAA,OAAKC,IAAKzD,EAAY2D,UAAU,mBAChCH,EAAAA,EAAAA,KAAA,OAAKC,IAAKxD,EAAY0D,UAAU,wBAG5C,C","sources":["components/BinaryBackground.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\"\r\n\r\nexport default function BinaryBackground(props) {\r\n\r\n    const canvasRef = useRef(null);\r\n    const frColorRef = useRef(null);\r\n    const bgColorRef = useRef(null);\r\n    const [windowInnerWidth, setWindowInnerWidth] = useState(window.innerWidth);\r\n    const [windowInnerHeight, setWindowInnerHeight] = useState(window.innerHeight);\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowInnerWidth(window.innerWidth);\r\n            setWindowInnerHeight(window.innerHeight);\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (canvasRef.current) {\r\n            const canvas = canvasRef.current;\r\n            const ctx = canvas.getContext('2d');\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n\r\n            const binary = props.text;\r\n            const fontSize = props.size;\r\n            const columns = canvas.width / fontSize;\r\n\r\n            const drops = [];\r\n            for (let x = 0; x < columns; x++) {\r\n                drops[x] = 1;\r\n            }\r\n            let bgColor = window.getComputedStyle(bgColorRef.current).color.toString();\r\n            ctx.fillStyle = bgColor;\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            function draw() {\r\n                let bgColor = window.getComputedStyle(bgColorRef.current).color.toString();\r\n                bgColor = bgColor.substring(bgColor.indexOf('(') + 1, bgColor.lastIndexOf(')')).split(/,\\s*/);\r\n                ctx.fillStyle = 'rgba(' + bgColor[0] + ', ' + bgColor[1] + ', ' + bgColor[2] + ', 0.05)';\r\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n                // ctx.fillStyle =  \"#d4163c\"\r\n                ctx.fillStyle =  window.getComputedStyle(frColorRef.current).color;\r\n                ctx.font = fontSize + 'px Glitch Goblin';\r\n\r\n                for (let i = 0; i < drops.length; i++) {\r\n                    const text = binary[Math.floor(Math.random() * binary.length)];\r\n                    ctx.fillText(text, i * fontSize, drops[i] * fontSize);\r\n\r\n                    if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) {\r\n                        drops[i] = 0;\r\n                    }\r\n\r\n                    drops[i]++;\r\n                }\r\n            }\r\n            const inter = setInterval(draw, props.speed);\r\n\r\n            return () => clearInterval(inter);\r\n        }\r\n    }, [windowInnerWidth, windowInnerHeight, props.size, props.speed, props.text]);\r\n\r\n    return (\r\n        <>\r\n            <canvas ref={canvasRef} id=\"canvas\" className=\"fixed top-0 left-0 w-screen h-screen z-[-1]\"></canvas>\r\n            <div ref={frColorRef} className=\"text-base-300\"></div>\r\n            <div ref={bgColorRef} className=\"text-base-content\"></div>\r\n        </>\r\n    )\r\n}"],"names":["BinaryBackground","props","canvasRef","useRef","frColorRef","bgColorRef","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowInnerWidth","setWindowInnerWidth","_useState3","innerHeight","_useState4","windowInnerHeight","setWindowInnerHeight","useEffect","handleResize","addEventListener","removeEventListener","current","canvas","ctx","getContext","width","height","binary","text","fontSize","size","columns","drops","x","bgColor","getComputedStyle","color","toString","fillStyle","fillRect","inter","setInterval","substring","indexOf","lastIndexOf","split","font","i","length","Math","floor","random","fillText","speed","clearInterval","_jsxs","_Fragment","children","_jsx","ref","id","className"],"sourceRoot":""}